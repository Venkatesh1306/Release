        -:    0:Source:Z:/On_testing/modbusrtu/Modbus_RTU_WT.X/test/test.c
        -:    0:Programs:10
        -:    1:#include "testhead.h"
        -:    2:
        -:    3:uint16_t Dataregister[100] = {
        -:    4:    0x1522, 0x2434, 0x3AAB, 0x4F6C, 0x6B81, 0x70D9, 0x8E2E, 0x9D07, 0xA1FA, 0xB0B5,
        -:    5:    0xC543, 0xD68E, 0xE99B, 0xFCE4, 0x1D32, 0x2E9F, 0x33C8, 0x40E7, 0x53AD, 0x64F1,
        -:    6:    0x78B6, 0x899C, 0x9A73, 0xABBE, 0xBC5A, 0xCF94, 0xD9E5, 0xEA47, 0xFB1B, 0x0D82,
        -:    7:    0x1F67, 0x26B0, 0x35DD, 0x47A6, 0x5829, 0x69EC, 0x7C11, 0x8D09, 0x9E84, 0xAF56,
        -:    8:    0xB80D, 0xC9C3, 0xD4FE, 0xE785, 0xF65A, 0x1573, 0x2A8E, 0x3B11, 0x4CCD, 0x5D35,
        -:    9:    0x6E6A, 0x7D14, 0x8CF8, 0x9F65, 0xAE1B, 0xBF9E, 0xCCBB, 0xD9AA, 0xE884, 0xF950,
        -:   10:    0x0DAA, 0x1E75, 0x25D6, 0x3433, 0x46BD, 0x5740, 0x6A0E, 0x7B8F, 0x8F4A, 0x9E93,
        -:   11:    0xA5F8, 0xB438, 0xC583, 0xD64F, 0xE729, 0xF890, 0x1AB7, 0x2D58, 0x38D4, 0x4919,
        -:   12:    0x5AFC, 0x6D2E, 0x7C61, 0x8DCA, 0x9EA5, 0xAF4B, 0xBE36, 0xCFDA, 0xDC1F, 0xEDC0,
        -:   13:    0xFC1B, 0x0E0D, 0x1DAA, 0x2A05, 0x3BDF, 0x4C79, 0x5D96, 0x6E6C, 0x7F92, 0x8F1B};
        -:   14:uint16_t_VAL arr[2];
        -:   15:
        -:   16:// recived packet frame
        -:   17:uint8_t ModbusRxBuftest[INR_SIZE][100] = {
        -:   18:    {0x08, 0x11, 0x09, 0x00, 0x02, 0x00, 0x02, 0xff, 0x5a},
        -:   19:    {0x08, 0x11, 0x03, 0x00, 0x04, 0x00, 0x02, 0x87, 0x5a},
        -:   20:    {0x08, 0x11, 0x03, 0x00, 0x02, 0x00, 0x02, 0x67, 0x5b},
        -:   21:    {0x08, 0x11, 0x03, 0x00, 0x7f, 0x00, 0x02, 0xf7, 0x43},
        -:   22:    {0x08, 0x11, 0x06, 0x00, 0x01, 0x03, 0x67, 0x9b, 0x80},
        -:   23:    {0x08, 0x11, 0x06, 0x00, 0x87, 0x03, 0x67, 0x7a, 0x69},
        -:   24:    {0x08, 0x11, 0x06, 0x00, 0x01, 0xff, 0x07, 0xda, 0xa8},
        -:   25:    {0x0d, 0x11, 0x10, 0x00, 0x07, 0x00, 0x02, 0x04, 0x00, 0x60, 0x07, 0x05, 0x24, 0xa4},
        -:   26:    {0x0d, 0x11, 0x10, 0x00, 0x92, 0x00, 0x02, 0x04, 0x00, 0x90, 0x07, 0x05, 0xed, 0xc4},
        -:   27:    {0x0d, 0x11, 0x10, 0x00, 0x01, 0x00, 0x02, 0x04, 0x00, 0x60, 0xff, 0xf0, 0x27, 0x09},
        -:   28:    {0x08, 0x11, 0x06, 0x00, 0x35, 0x03, 0x99, 0x5b, 0xce},
        -:   29:    {0x0d, 0x11, 0x10, 0x00, 0x36, 0x00, 0x02, 0x04, 0x00, 0x04, 0x56, 0x05, 0x9a, 0x33},
        -:   30:    {0x08, 0x16, 0x03, 0x00, 0x35, 0x00, 0x03, 0x16, 0xE2},
        -:   31:    {0x08, 0x11, 0x03, 0x00, 0x06, 0x00, 0x03, 0xe7, 0x5a},
        -:   32:    {0x08, 0x11, 0x03, 0x00, 0x45, 0x00, 0x03, 0x16, 0x8e},
        -:   33:    {0x0d, 0x11, 0x10, 0x00, 0x54, 0x00, 0x02, 0x04, 0x00, 0x87, 0x65, 0x07, 0x79, 0x1B},
        -:   34:    {0x08, 0x11, 0x03, 0x00, 0x54, 0x00, 0x02, 0x87, 0x4b},
        -:   35:    {0x49, 0x11, 0x10, 0x00, 0x30, 0x00, 0x20, 0x40, 0x4F, 0x3D, 0x21, 0x6B, 0x7A, 0x16, 0x59, 0x4C, 0x2A, 0x35, 0x60, 0x52, 0x09, 0x7D, 0x0C, 0x1A,
        -:   36:     0x68, 0x3F, 0x47, 0x75, 0x18, 0x38, 0x2F, 0x62, 0x1D, 0x0A, 0x5B, 0x6F, 0x43, 0x27, 0x56, 0x29,
        -:   37:     0x53, 0x6C, 0x3E, 0x72, 0x05, 0x1F, 0x49, 0x4E, 0x37, 0x09, 0x5D, 0x44, 0x63, 0x28, 0x1C, 0x7B,
        -:   38:     0x0D, 0x32, 0x67, 0x2B, 0x5A, 0x7C, 0x10, 0x4A, 0x2C, 0x39, 0x6A, 0x08, 0x1E, 0x57, 0x42, 0x24, 0x12, 0x83},
        -:   39:    {0x08, 0x11, 0x03, 0x00, 0x30, 0x00, 0x20, 0x46, 0x8d},
        -:   40:};
        -:   41:
        -:   42:// expected frame to send
        -:   43:uint8_t textTxts[INR_SIZE][100] = {
        -:   44:    {0x03, 0x11, 0x89, 0x01},
        -:   45:    {0x07, 0x11, 0x03, 0x04, 0x6b, 0x81, 0x70, 0xd9},
        -:   46:    {0x07, 0x11, 0x03, 0x04, 0x3a, 0xab, 0x4f, 0x6c},
        -:   47:    {0x03, 0x11, 0x83, 0x02},
        -:   48:    {0x06, 0x11, 0x06, 0x00, 0x01, 0x3, 0x67},
        -:   49:    {0x03, 0x11, 0x86, 0x02},
        -:   50:    {0x03, 0x11, 0x86, 0x03},
        -:   51:    {0x06, 0x11, 0x10, 0x00, 0x07, 0x00, 0x02},
        -:   52:    {0x03, 0x11, 0x90, 0x02},
        -:   53:    {0x03, 0x11, 0x90, 0x03},
        -:   54:    {0x06, 0x11, 0x06, 0x00, 0x35, 0x03, 0x99},
        -:   55:    {0x06, 0x11, 0x10, 0x00, 0x36, 0x00, 0x02},
        -:   56:    {0},
        -:   57:    {0x09, 0x11, 0x03, 0x06, 0x8e, 0x2e, 0x9d, 0x07, 0xa1, 0xfa},
        -:   58:    {0x09, 0x11, 0x03, 0x06, 0x9e, 0x93, 0xa5, 0xf8, 0xb4, 0x38},
        -:   59:    {0x06, 0x11, 0x10, 0x00, 0x54, 0x00, 0x02},
        -:   60:    {0x07, 0x11, 0x03, 0x04, 0x9e, 0xa5, 0xaf, 0x4b},
        -:   61:    {0x06, 0x11, 0x10, 0x00, 0x30, 0x00, 0x20},
        -:   62:    {0x43, 0x11, 0x03, 0x40, 0x4C, 0xCD, 0x5D, 0x35, 0x6E, 0x6A, 0x7D, 0x14, 0x8C, 0xF8, 0x9F, 0x65, 0xAE, 0x1B, 0xBF, 0x9E,
        -:   63:     0xCC, 0xBB, 0xD9, 0xAA, 0xE8, 0x84, 0xF9, 0x50, 0x0D, 0xAA, 0x1E, 0x75, 0x25, 0xD6, 0x34, 0x33, 0x46, 0xBD, 0x57, 0x40, 0x6A, 0x0E, 0x7B, 0x8F, 0x8F, 0x4A, 0x9E, 0x93, 0xA5,
        -:   64:     0xF8, 0xB4, 0x38, 0xC5, 0x83, 0xD6, 0x4F, 0xE7, 0x29, 0xF8, 0x90, 0x1A, 0xB7, 0x2D, 0x58, 0x38, 0xD4, 0x49, 0x19},
        -:   65:};
        -:   66:
        -:   67:/*
        -:   68: * main function for testing
        -:   69: * generates the expected frame by cosidering the ModbusRxBuf
        -:   70: * stores the frame in testTxBuf
        -:   71: * finally checks the expected and actual outputs are same
        -:   72: * expected -- testTxBuf
        -:   73: */
        1:   74:int main()
        -:   75:{
        -:   76:
        -:   77:   int j;
       20:   78:   for (incrs = 0; incrs < INR_SIZE; incrs++)
        -:   79:   {
      280:   80:      for (j = 0; j <= ModbusRxBuftest[incrs][0]; j++)
        -:   81:      {
      261:   82:         ModbusRxBuf[j] = ModbusRxBuftest[incrs][j + 1];
        -:   83:      }
      198:   84:      for (j = 0; j <= textTxts[incrs][0]; j++)
        -:   85:      {
      179:   86:         testTxBuf[j] = textTxts[incrs][j + 1];
        -:   87:      }
        -:   88:
       19:   89:      arr[0].Val = calculate_crc(&testTxBuf[0], textTxts[incrs][0]);
       19:   90:      testTxBuf[textTxts[incrs][0]] = arr[0].bytes.LB;
       19:   91:      testTxBuf[textTxts[incrs][0] + 1] = arr[0].bytes.HB;
        -:   92:
       19:   93:      textTxts[incrs][0] = textTxts[incrs][0] + 2;
        -:   94:
       19:   95:      if (ModbusRxBuf[1] == 0x03)
        -:   96:      {
        -:   97:
        8:   98:         uint16_t Dataregister[100] = {
        -:   99:             0x1522, 0x2434, 0x3AAB, 0x4F6C, 0x6B81, 0x70D9, 0x8E2E, 0x9D07, 0xA1FA, 0xB0B5,
        -:  100:             0xC543, 0xD68E, 0xE99B, 0xFCE4, 0x1D32, 0x2E9F, 0x33C8, 0x40E7, 0x53AD, 0x64F1,
        -:  101:             0x78B6, 0x899C, 0x9A73, 0xABBE, 0xBC5A, 0xCF94, 0xD9E5, 0xEA47, 0xFB1B, 0x0D82,
        -:  102:             0x1F67, 0x26B0, 0x35DD, 0x47A6, 0x5829, 0x69EC, 0x7C11, 0x8D09, 0x9E84, 0xAF56,
        -:  103:             0xB80D, 0xC9C3, 0xD4FE, 0xE785, 0xF65A, 0x1573, 0x2A8E, 0x3B11, 0x4CCD, 0x5D35,
        -:  104:             0x6E6A, 0x7D14, 0x8CF8, 0x9F65, 0xAE1B, 0xBF9E, 0xCCBB, 0xD9AA, 0xE884, 0xF950,
        -:  105:             0x0DAA, 0x1E75, 0x25D6, 0x3433, 0x46BD, 0x5740, 0x6A0E, 0x7B8F, 0x8F4A, 0x9E93,
        -:  106:             0xA5F8, 0xB438, 0xC583, 0xD64F, 0xE729, 0xF890, 0x1AB7, 0x2D58, 0x38D4, 0x4919,
        -:  107:             0x5AFC, 0x6D2E, 0x7C61, 0x8DCA, 0x9EA5, 0xAF4B, 0xBE36, 0xCFDA, 0xDC1F, 0xEDC0,
        -:  108:             0xFC1B, 0x0E0D, 0x1DAA, 0x2A05, 0x3BDF, 0x4C79, 0x5D96, 0x6E6C, 0x7F92, 0x8F1B};
        -:  109:
        8:  110:         modbusRtuFrame(&ModbusRxBuf[0], &Dataregister[0], &mbTxBuf[0], &ModbusTxLength); // main call function
        -:  111:
        8:  112:         Test_ing(mbTxBuf, testTxBuf); // comparing expected and actual frame
        -:  113:
        8:  114:         printfunction(); // printing the output
        -:  115:      }
        -:  116:      else
        -:  117:      {
       11:  118:         modbusRtuFrame(&ModbusRxBuf[0], &Dataregister[0], &mbTxBuf[0], &ModbusTxLength); // main call function
        -:  119:
       11:  120:         Test_ing(mbTxBuf, testTxBuf); // comparing expected and actual frame
        -:  121:
       11:  122:         printfunction(); // printing the output
        -:  123:      }
        -:  124:   }
        -:  125:}
