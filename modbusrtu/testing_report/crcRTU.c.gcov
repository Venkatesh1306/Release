        -:    0:Source:Z:/On_testing/modbusrtu/Modbus_RTU_WT.X/libModbusRtu/crcRTU.c
        -:    0:Programs:10
        -:    1:#include "ModbusRtu.h"
        -:    2:
        -:    3:/*
        -:    4: * Function name : uint8_t getLOWbyte(uint16_t input)
        -:    5: * Return Type   : Returns the low byte from the input.
        -:    6: * Parameters    : uint16_t input - ModbusRtuRx frame with the generated crc
        -:    7: * Description   :The result of the bitwise AND operation is returned as an 8-bit unsigned integer (uint8_t), which contains the low byte of the original 16-bit input.
        -:    8: * Usage         :
        -:    9: *      Example -   getLOWbyte(Rcv_Data_CRC);
        -:   10: * Required      :  Rcv_Data_CRC that is the generated crc
        -:   11: */
        -:   12:
       18:   13:uint8_t getLOWbyte(uint16_t input)
        -:   14:{
        -:   15:
       18:   16:    return input & 255;
        -:   17:}
        -:   18:
        -:   19:/* Function name : uint8_t getHIGHbyte(uint16_t input)
        -:   20: * Return Type   : Returns the High byte from the input.
        -:   21: * Parameters    : uint16_t input - ModbusRx frame with the generated crc
        -:   22: * Description   :The result of the bitwise AND operation is returned as an 8-bit unsigned integer (uint8_t), which contains the high byte of the original 16-bit input.
        -:   23: * Usage         :
        -:   24: *      Example -   getLOWbyte(Rcv_Data_CRC);
        -:   25: * Required      :  Rcv_Data_CRC that is the generated crc
        -:   26: */
        -:   27:/* Get HIGH byte of int */
       18:   28:uint8_t getHIGHbyte(uint16_t input)
        -:   29:{
        -:   30:
       18:   31:    return (input >> 8) & 255;
        -:   32:}
        -:   33:
        -:   34:/*
        -:   35: * Function name : uint16_t combineBytes(uint8_t high, uint8_t low)
        -:   36: * Return Type   : returns the combined high and low bytes of a 16-bit value into a single 16-bit unsigned integer.
        -:   37: * Parameters    : uint8_t high, uint8_t low
        -:   38: * Description   : The function combineBytes takes two 8-bit unsigned integers high and low, representing the high and low bytes of a 16-bit value respectively, and combines them into a single 16-bit unsigned integer.
        -:   39: * Usage         : uint16_t combineBytes(uint8_t highbyte, uint8_t lowbyte)
        -:   40: *      Example -
        -:   41: * Required      :  two 8-bit values
        -:   42: */
        -:   43:/* Combine HIGH and LOW bytes */
    #####:   44:uint16_t combineBytes(uint8_t high, uint8_t low)
        -:   45:{
        -:   46:
    #####:   47:    return (int)(high << 8) + low;
        -:   48:}
        -:   49:
        -:   50:/*
        -:   51: * Function name : uint16_t generateCRC(uint8_t * data, uint8_t length)
        -:   52: * Return Type   : Returns the final CRC value calculated over the entire data buffer.
        -:   53: * Parameters    : uint16_t input - ModbusRtuRx frame
        -:   54: *                 uint16_t length - ModbusRtuRx frame length without crc
        -:   55: * Description   : This function is responsible for generating a CRC value for a given data buffer using the CRC16 function
        -:   56: * Usage         :
        -:   57: *      Example -   generateCRC(data, Rcv_byte_cnt1);
        -:   58: * Required      :  ModbusRxframe ,its length
        -:   59: */
        -:   60:
       36:   61:uint16_t generateCRC(const uint8_t *data, uint8_t length)
        -:   62:{
       36:   63:    uint16_t crc = 0xFFFF; /* load a bit register with FFFF - CRC register */
        -:   64:    uint16_t j;
      389:   65:    for (j = 0; j < length; j++)
        -:   66:    {
        -:   67:
      353:   68:        crc = CRC16(crc, data[j]);
        -:   69:    }
       36:   70:    return crc;
        -:   71:}
        -:   72:
        -:   73:/*
        -:   74: * Function name : uint16_t CRC16(uint16_t crc, uint16_t data)
        -:   75: * Return Type   : Returns the final CRC value calculated over the entire data buffer.
        -:   76: * Parameters    : uint16_t input - ModbusRtuRx frame
        -:   77: *                 uint16_t length - ModbusRtuRx frame length without crc
        -:   78: * Description   : This function is responsible for generating a CRC value for a given data buffer using the CRC16 function
        -:   79: * Usage         :
        -:   80: *      Example -   generateCRC(data, Rcv_byte_cnt1);
        -:   81: * Required      :  ModbusRxframe ,its length
        -:   82: */
        -:   83:
        -:   84:/* CRC algorithm */
      353:   85:uint16_t CRC16(uint16_t crc, uint16_t data)
        -:   86:{
      353:   87:    const uint16_t Poly16 = 0xA001;
        -:   88:    uint16_t LSB, i;
      353:   89:    crc = ((crc ^ data) | 0xFF00) & (crc | 0x00FF); /* EXOR the first b-bit byte of the message with the low-order byte of the 16 bit */
     3177:   90:    for (i = 0; i < 8; i++)
        -:   91:    {                         /* CRC register, put the result in the CRC regsiter */
     2824:   92:        LSB = (crc & 0x0001); /* check LSB is 1 */
     2824:   93:        crc = crc / 2;        /*  right shift the CRC, Zero filling the MSB */
        -:   94:
     2824:   95:        if (LSB)
     1406:   96:            crc = crc ^ Poly16; /*  if LSB of CRC is 1 --> EXOR with polynomial value 0xA001 */
        -:   97:    }
      353:   98:    return (crc);
        -:   99:}
        -:  100:
        -:  101:/* Function name : uint16_t checkCRC(uint8_t * data, uint8_t Rcv_byte_cnt)
        -:  102: * Return Type   : Returns either 0 or 1
        -:  103: * Parameters    :
        -:  104: *      data        - The Query message from the ModbusRTU
        -:  105: *     Rcv_byte_cnt - length of the query frame
        -:  106: *
        -:  107: * Description   :
        -:  108: *      The receiving device recalculates a CRC of the query message, and compares the calculated
        -:  109: * value to the actual value it received in the CRC field. If the two values are not equal, an error results.
        -:  110: * Usage         :
        -:  111: *      Example - checkEqual = checkCRC(&p_modbusRxBuf[0], preMultiLength);
        -:  112: * Required      :  modbusTcpRxBuf,byte count of received query frame
        -:  113: *
        -:  114: */
        -:  115:
       18:  116:uint16_t checkCRC(const uint8_t *data, uint8_t Rcv_byte_cnt)
        -:  117:{
       18:  118:    uint8_t Rcv_byte_cnt1 = 0;
       18:  119:    uint16_t Rcv_Data_CRC = 0;
       18:  120:    uint16_t low_byte = 0;
       18:  121:    uint16_t highbyte = 0;
       18:  122:    Rcv_byte_cnt1 = Rcv_byte_cnt - 2;
       18:  123:    Rcv_Data_CRC = generateCRC(data, Rcv_byte_cnt1);
       18:  124:    low_byte = getLOWbyte(Rcv_Data_CRC);
       18:  125:    highbyte = getHIGHbyte(Rcv_Data_CRC);
        -:  126:
       35:  127:    if (low_byte == data[Rcv_byte_cnt - 2] &&
       17:  128:        highbyte == data[Rcv_byte_cnt - 1])
        -:  129:    {
       17:  130:        return 0x01;
        -:  131:    }
        -:  132:    else
        -:  133:    {
        1:  134:        return 0x00;
        -:  135:    }
        -:  136:}
