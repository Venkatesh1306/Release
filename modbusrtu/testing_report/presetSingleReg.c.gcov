        -:    0:Source:Z:/On_testing/modbusrtu/Modbus_RTU_WT.X/libModbusRtu/presetSingleReg.c
        -:    0:Programs:10
        -:    1:/*
        -:    2:
        -:    3: QUERY FRAME :
        -:    4:
        -:    5:
        -:    6:| Slave Address | Function Code | Starting Address (Hi)  | Starting Address (Lo)  | Preset Value (Hi) | Preset Value (Lo) | CRC (Hi) | CRC (Lo) |
        -:    7:|---------------|---------------|------------------------|------------------------|-------------------|-------------------|----------|----------|
        -:    8:|     1 byte    |    1 byte     |        1 byte          |        1 byte          |      1 byte       |      1 byte       |  1 byte  |  1 byte  |
        -:    9:
        -:   10:RESPONSE FRAME:
        -:   11:
        -:   12:| Slave Address | Function Code | Starting Address (Hi)  | Starting Address (Lo)  | Preset Value (Hi) | Preset Value (Lo) | CRC (Hi) | CRC (Lo) |
        -:   13:|---------------|---------------|------------------------|------------------------|-------------------|-------------------|----------|----------|
        -:   14:|     1 byte    |    1 byte     |        1 byte          |        1 byte          |      1 byte       |      1 byte       |  1 byte  |  1 byte  |
        -:   15:
        -:   16:Presets a value into a single holding register (4X reference).
        -:   17:* INPUT FRAME = {0x11, 0x06, 0x00, 0x02, 0x09, 0x0D, 0xED, 0x0F}
        -:   18:* DATA REGISTER = {0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890};
        -:   19:
        -:   20:
        -:   21:The query message specifies the register reference to be preset. Registers are addressed starting at zero: register 1 is addressed as 0.
        -:   22:The requested preset value is specified in the query data field (4th & 5th byte)
        -:   23:DATA REGISTER AFTER PRESETTING ,
        -:   24:DATA REGISTER = {0x0000, 0x0001, 0x090D, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890};
        -:   25:The normal response is an echo of the query, returned after the register contentshave been preset.
        -:   26:* RESPONSE FRAME ={0x11, 0x06, 0x00, 0x02, 0x09, 0x0D, 0xED, 0x0F}
        -:   27:*/
        -:   28:
        -:   29:#include "modbusRtu.h"
        -:   30:
        3:   31:uint16_t presetSingleRegisters(uint8_t *p_modbusTxBuf, uint16_t *p_dataMemory, mbPacketParse_t *p_parseModbusRtuData)
        -:   32:{
        3:   33:    uint16_t length = 0;
        -:   34:
        -:   35:    /* Assigning values for modbustx buffer */
        3:   36:    p_modbusTxBuf[0] = p_parseModbusRtuData->slave_addr.Val;
        3:   37:    p_modbusTxBuf[1] = p_parseModbusRtuData->functionCode;
        -:   38:
        3:   39:    if (p_parseModbusRtuData->preset_Data.Val >= 65000)
        -:   40:    {
        1:   41:        p_parseModbusRtuData->functionCode = p_parseModbusRtuData->functionCode + 128;
        1:   42:        modbusError(p_parseModbusRtuData, p_modbusTxBuf, Illegal_Data_Value);
        1:   43:        length = 0x04;
        -:   44:    }
        -:   45:    else
        -:   46:    {
        2:   47:        p_dataMemory[p_parseModbusRtuData->startAddress.Val] = (p_parseModbusRtuData->preset_Data.v[0] + p_parseModbusRtuData->preset_Data.v[1] * 0x100);
        -:   48:        /* Assigning values for modbustx buffer */
        2:   49:        p_modbusTxBuf[2] = p_parseModbusRtuData->startAddress.v[1];
        2:   50:        p_modbusTxBuf[3] = p_parseModbusRtuData->startAddress.v[0];
        -:   51:
        2:   52:        p_modbusTxBuf[4] = p_parseModbusRtuData->preset_Data.v[1]; /* Preset Data Hi */
        -:   53:
        2:   54:        p_modbusTxBuf[5] = p_parseModbusRtuData->preset_Data.v[0]; /* Preset Data Lo */
        -:   55:
        2:   56:        p_parseModbusRtuData->crc.Val = generateCRC(&p_modbusTxBuf[0], 6);
        -:   57:
        2:   58:        p_modbusTxBuf[6] = p_parseModbusRtuData->crc.bytes.LB;
        -:   59:
        2:   60:        p_modbusTxBuf[7] = p_parseModbusRtuData->crc.bytes.HB;
        -:   61:
        2:   62:        length = 0x08;
        -:   63:    }
        -:   64:
        3:   65:    return length;
        -:   66:}
