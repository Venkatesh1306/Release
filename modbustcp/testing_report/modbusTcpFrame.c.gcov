        -:    0:Source:Z:/On_testing/modbustcp/Sample_Mobus_t.X/libModbusTcp/modbusTcpFrame.c
        -:    0:Programs:9
        -:    1:/*
        -:    2:Function name : uint16_t modbusTcpFrame(const uint8_t *p_modbusRxBuf, uint16_t *p_dataMemory, uint8_t *p_modbusTxBuf, uint16_t *modBusframeLength)
        -:    3: Return Type   : Returns the modBusframeLength i.e the length of the frame to be transmitted.
        -:    4: Parameters    :
        -:    5: *      p_modbusRxBuf      -  received input frame that contains message format of query from the client
        -:    6: *      p_modbusTxBuf      -  response frame that is sent to client from the server after processing the query frame
        -:    7: *      p_dataMemory       -  memory register to configure,monitor, and control device I/O
        -:    8: *      modBusframeLength  -  the length of the Modbus Transmission frame i.e response frame
        -:    9: Description   :
        -:   10: *      This function receives the query message and the Datamemory from the client. It processes the query frame
        -:   11: * by parsing and checks for errors. If no error is detected , it frames the response message to be transmitted to the client.
        -:   12: Usage         :
        -:   13: *      Example - modbusTxframeLength = modbusTcpFrame (&modbusTcpRxBuf[0], &dataMemory[0], &modbusTcpTxBuf[0],modBusframeLength);
        -:   14: Required      :  modbusTcpRxBuf,dataMemory
        -:   15: Error Handling: This function checks for the modbus exception cases in the query message and provide response
        -:   16: *               according to the nature of the error and exception code.
        -:   17:*/
        -:   18:
        -:   19:#include "ModbusTcp.h"
        -:   20:mbPacketParse_t p_parseModbusTcpData;
        -:   21:
       18:   22:uint16_t modbusTcpFrame(const uint8_t *p_modbusRxBuf, uint16_t *p_dataMemory, uint8_t *p_modbusTxBuf, uint16_t *modBusframeLength)
        -:   23:{
        -:   24:
       18:   25:  modbusTcpParse(&p_parseModbusTcpData, p_modbusRxBuf); /* Parsing Function */
        -:   26:
       35:   27:  if (!(p_parseModbusTcpData.functionCode == ReadHoldingRegister ||
       11:   28:        p_parseModbusTcpData.functionCode == PresetSingleRegister ||
        6:   29:        p_parseModbusTcpData.functionCode == PresetMultipleRegisters)) /* Function code error */
        -:   30:  {
        1:   31:    p_parseModbusTcpData.functionCode = p_parseModbusTcpData.functionCode + 0x80;
        1:   32:    modbusError(&p_parseModbusTcpData, p_modbusTxBuf, Illegal_Function_Code);
        1:   33:    *modBusframeLength = 0x9;
        -:   34:  }
        -:   35:
       17:   36:  else if (p_parseModbusTcpData.numberofRegister.Val > (MaxSizeTcpTx - 8)) /* Data error */
        -:   37:  {
    #####:   38:    p_parseModbusTcpData.functionCode = p_parseModbusTcpData.functionCode + 0x80;
    #####:   39:    modbusError(&p_parseModbusTcpData, p_modbusTxBuf, Illegal_Data_Value);
    #####:   40:    *modBusframeLength = 0x9;
        -:   41:  }
        -:   42:
       27:   43:  else if (p_parseModbusTcpData.functionCode == ReadHoldingRegister ||
       10:   44:           p_parseModbusTcpData.functionCode == PresetMultipleRegisters) /* Address error*/
        -:   45:  {
       34:   46:    if ((p_parseModbusTcpData.startAddress.Val > (int)(DataRegistersize)) ||
       10:   47:        ((p_parseModbusTcpData.startAddress.Val + p_parseModbusTcpData.numberofRegister.Val) > (int)(DataRegistersize)))
        -:   48:    {
        2:   49:      p_parseModbusTcpData.functionCode = p_parseModbusTcpData.functionCode + 0x80;
        2:   50:      modbusError(&p_parseModbusTcpData, p_modbusTxBuf, Illegal_Data_Address);
        2:   51:      *modBusframeLength = 0x9;
        -:   52:    }
        -:   53:  }
        5:   54:  else if (p_parseModbusTcpData.functionCode == PresetSingleRegister) /* Addresss error for FC-0x06 */
        -:   55:  {
        5:   56:    if (p_parseModbusTcpData.startAddress.Val > (int)(DataRegistersize))
        -:   57:    {
        1:   58:      p_parseModbusTcpData.functionCode = p_parseModbusTcpData.functionCode + 0x80;
        1:   59:      modbusError(&p_parseModbusTcpData, p_modbusTxBuf, Illegal_Data_Address);
        1:   60:      *modBusframeLength = 0x9;
        -:   61:    }
        -:   62:  }
        -:   63:
        -:   64:  /* Response Function specific to function code */
       18:   65:  switch (p_parseModbusTcpData.functionCode)
        -:   66:  {
        -:   67:  case ReadHoldingRegister:
        -:   68:
        6:   69:    *modBusframeLength = readHoldingRegisters(p_modbusTxBuf, p_dataMemory, &p_parseModbusTcpData);
        6:   70:    break;
        -:   71:
        -:   72:  case PresetSingleRegister:
        -:   73:
        4:   74:    *modBusframeLength = presetSingleRegister(p_modbusTxBuf, p_dataMemory, &p_parseModbusTcpData);
        4:   75:    break;
        -:   76:
        -:   77:  case PresetMultipleRegisters:
        -:   78:
        4:   79:    *modBusframeLength = presetMultipleRegisters(p_modbusTxBuf, p_dataMemory, &p_parseModbusTcpData);
        4:   80:    break;
        -:   81:  default:
        4:   82:    break;
        -:   83:  }
       18:   84:  return *modBusframeLength;
        -:   85:}
