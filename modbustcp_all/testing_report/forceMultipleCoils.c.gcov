        -:    0:Source:Z:/On_testing/modbustcp/SampleModbusTCP_8Fn/libModbusTcp/forceMultipleCoils.c
        -:    0:Programs:14
        -:    1:/* Force Multiple Coil - Function Code - 0F
        -:    2: *  The query message specifies the coil reference to be forced
        -:    3:
        -:    4: * QUERY FRAME:
        -:    5:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Coil Address | Number of Bits |  Force Data Value      |
        -:    6:|------------------------|---------------------|--------|-----------------|---------------|--------------|----------------|------------------------|
        -:    7:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |    2 bytes   |     2 bytes    |  Variable(nbytes)      |
        -:    8:
        -:    9:RESPONSE FRAME:
        -:   10:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Coil Address |     Force Data Value   |
        -:   11:|------------------------|---------------------|--------|-----------------|---------------|--------------|------------------------|
        -:   12:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |    2 bytes   |         2 bytes        |
        -:   13: *
        -:   14: * INPUT FRAME    = {0x00, 0x01, 0x00, 0x02, 0x00, 0x0B, 0x03, 0x0F, 0x00, 0x01, 0x00, 0x15, 0x04, 0xcd, 0x01, 0x03, 0x02}
        -:   15: * RESPONSE FRAME = {0x00, 0x01, 0x00, 0x02, 0x00, 0x06, 0x03, 0x0F, 0x00, 0x01, 0x00, 0x15}
        -:   16: */
        -:   17:
        -:   18:#include "modbusTcp.h"
        -:   19:
        -:   20:/* Macro definitions */
        -:   21:#define SET(x, y) x |= (1 << y)
        -:   22:#define READ(x, y) ((0u == (x & (1 << y))) ? 0u : 1u)
        -:   23:#define CLEAR(x, y) x &= ~(1 << y)
        -:   24:
        2:   25:uint16_t forceMultipleCoils(uint8_t *p_modbusTxBuf, uint16_t *p_dataMemory, mbPacketParse_t *p_parseModbusTcpData)
        -:   26:{
        -:   27:    /* Declaration of local variables*/
        2:   28:    unsigned int NoOfBits = 0, bit_count = 0, Regbit = 0, regTx = 0, RegbitTx = 0, reg = 0;
        2:   29:    unsigned int coil_data = 0;
        -:   30:
        -:   31:    /* Assigning values for transmitting buffer*/
        2:   32:    p_modbusTxBuf[0] = p_parseModbusTcpData->transactionID.v[1];
        2:   33:    p_modbusTxBuf[1] = p_parseModbusTcpData->transactionID.v[0];
        -:   34:
        2:   35:    p_modbusTxBuf[2] = p_parseModbusTcpData->protocolID.v[1];
        2:   36:    p_modbusTxBuf[3] = p_parseModbusTcpData->protocolID.v[0];
        -:   37:
        2:   38:    p_modbusTxBuf[4] = 0X0;
        2:   39:    p_modbusTxBuf[5] = 0x06;
        -:   40:
        2:   41:    p_modbusTxBuf[6] = p_parseModbusTcpData->unitID;
        2:   42:    p_modbusTxBuf[7] = p_parseModbusTcpData->functionCode;
        -:   43:
        2:   44:    p_modbusTxBuf[8] = p_parseModbusTcpData->startAddress.v[1];
        2:   45:    p_modbusTxBuf[9] = p_parseModbusTcpData->startAddress.v[0];
        -:   46:
        2:   47:    p_modbusTxBuf[10] = p_parseModbusTcpData->numberofRegister.v[1];
        2:   48:    p_modbusTxBuf[11] = p_parseModbusTcpData->numberofRegister.v[0];
        -:   49:
        2:   50:    NoOfBits = p_parseModbusTcpData->numberofRegister.Val; /*Quantity of coils*/
        -:   51:
       27:   52:    for (bit_count = NoOfBits - 1; bit_count >= 0; bit_count--) /*byte count*/
        -:   53:    {
        -:   54:
       52:   55:        Regbit = (p_parseModbusTcpData->startAddress.Val + bit_count - 1) % 16; /* 20 - 1 % 16 = 4th bit */
       27:   56:        reg = (p_parseModbusTcpData->startAddress.Val + bit_count - 1) / 16;    /* 20 - 1 /16 = 1st  reg */
        -:   57:
       27:   58:        RegbitTx = (bit_count) % 16; /* 20 - 1 % 16 = 4th bit -- bit increment */
       27:   59:        regTx = (bit_count) / 16;    /* 20 - 1 /16 = 1st  reg -- register increment */
        -:   60:
       27:   61:        if (p_parseModbusTcpData->coilData[regTx] > 65000) /*checks for illegal data*/
        -:   62:        {
        1:   63:            p_parseModbusTcpData->functionCode = p_parseModbusTcpData->functionCode + 0x80;
        1:   64:            modbusError(p_parseModbusTcpData, p_modbusTxBuf, Illegal_Data_Value);
        1:   65:            break;
        -:   66:        }
        -:   67:        else
        -:   68:        {
       26:   69:            coil_data = READ(p_parseModbusTcpData->coilData[regTx], RegbitTx);
        -:   70:
       26:   71:            if (coil_data == 0x1)
        -:   72:            {
       10:   73:                SET(p_dataMemory[reg], Regbit);
        -:   74:            }
        -:   75:            else
        -:   76:            {
       16:   77:                CLEAR(p_dataMemory[reg], Regbit);
        -:   78:            }
       26:   79:            if (bit_count == 0)
        -:   80:            {
        1:   81:                break;
        -:   82:            }
        -:   83:        }
        -:   84:    }
        2:   85:    return 0x12;
        -:   86:}
