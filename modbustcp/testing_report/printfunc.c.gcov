        -:    0:Source:Z:/On_testing/modbustcp/Sample_Mobus_t.X/test/printfunc.c
        -:    0:Programs:9
        -:    1:#include "testhead.h"
        -:    2:
       18:    3:void printfunction()
        -:    4:{
        -:    5:
       18:    6:    switch (ModbusRxBuf[7])
        -:    7:    {
        -:    8:    case 0x03:
        7:    9:        printf(ANSI_COLOR_BLUE "\nReadHolding");
        7:   10:        break;
        -:   11:    case 0x06:
        5:   12:        printf(ANSI_COLOR_BLUE "\nPresetSingle");
        5:   13:        break;
        -:   14:    case 0x10:
        5:   15:        printf(ANSI_COLOR_BLUE "\nPresetMultiple");
        5:   16:        break;
        -:   17:    }
       18:   18:    printf(ANSI_COLOR_RESET "\nQuery Packet:%d", incrs + 1);
        -:   19:
       18:   20:    if (ModbusTxBuf[7] > 0x80)
        -:   21:    {
        6:   22:        switch (ModbusTxBuf[8])
        -:   23:        {
        -:   24:        case 1:
        1:   25:            printf(ANSI_COLOR_ORANGE " - Function Error ");
        1:   26:            break;
        -:   27:        case 2:
        3:   28:            printf(ANSI_COLOR_ORANGE " - Address Error ");
        3:   29:            break;
        -:   30:        case 3:
        2:   31:            printf(ANSI_COLOR_ORANGE " - Data Error ");
        2:   32:            break;
        -:   33:        }
        -:   34:    }
        -:   35:
        -:   36:#ifdef result
        -:   37:
       18:   38:    printf(ANSI_COLOR_RESET "\n");
       18:   39:    printf("Number of packets to send: %d\n", ModbusTxLength);
        -:   40:
      264:   41:    for (int i = 0; i < ModbusRxBuftest[incrs][0]; i++)
      246:   42:        printf("%02X ", ModbusRxBuf[i]);
       18:   43:    printf("\n");
        -:   44:
       18:   45:    printf("Expected Response:\n");
      256:   46:    for (int i = 0; i < Test_TXtest[incrs][0]; i++)
      238:   47:        printf("%02X ", Test_tx[i]);
       18:   48:    printf("\n");
        -:   49:
       18:   50:    printf("Actual Response:\n");
       18:   51:    int responseLength = (ModbusTxBuf[7] == 0x06 || ModbusTxBuf[7] == 0x10 || ModbusTxBuf[7] == 0x05 || ModbusTxBuf[7] == 0x0f) ? 0x0C : ((ModbusTxBuf[7] < 0x80) ? 0x09 + ModbusTxBuf[8] : 0x09);
      256:   52:    for (int i = 0; i < responseLength; i++)
      238:   53:        printf("%02X ", ModbusTxBuf[i]);
       18:   54:    printf("\n");
        -:   55:
        -:   56:#endif
        -:   57:
       18:   58:    printf(Test_Res == 1 ? ANSI_COLOR_GREEN " Test Passed" : ANSI_COLOR_RED " Test failed\n");
        -:   59:
       18:   60:    if (ModbusRxBuf[7] == 0x6 || ModbusRxBuf[7] == 0x10 || ModbusTxBuf[7] == 0x05 || ModbusRxBuf[7] == 0x0f)
        -:   61:
       10:   62:        printf(testcheck == 1 ? ANSI_COLOR_RED " - Data not Entered" : ANSI_COLOR_GREEN " - Data Entered");
        -:   63:
       18:   64:    printf("\n");
       18:   65:    printf(ANSI_COLOR_RESET); // Reset color to default
       18:   66:}
