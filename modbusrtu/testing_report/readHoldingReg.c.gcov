        -:    0:Source:Z:/On_testing/modbusrtu/Modbus_RTU_WT.X/libModbusRtu/readHoldingReg.c
        -:    0:Programs:10
        -:    1:/*
        -:    2:
        -:    3:QUERY FRAME :
        -:    4:
        -:    5:|Slave Address |  Function Code   |   Starting Address (Hi)   |   Starting Address (Lo)   |   Quantity of Registers (Hi)  |   Quantity of Registers (Lo)  |   CRC (Cyclic Redundancy Check)|
        -:    6:|--------------|------------------|---------------------------|---------------------------|-------------------------------|-------------------------------|--------------------------------|
        -:    7:|    1 byte    |     1 byte       |         1 byte            |          1 byte           |            1 byte             |            1 byte             |     2 bytes                    |
        -:    8:
        -:    9:RESPONSE FRAME :
        -:   10:
        -:   11:| Slave Address | Function Code | Byte Count | Data (Hi) | Data (Lo) | ... | Data (Hi) | Data (Lo) | CRC (Cyclic Redundancy Check) |
        -:   12:|---------------|---------------|------------|------------|------------|-----|------------|------------|--------------------------------|
        -:   13:|     1 byte    |    1 byte     |   1 byte   |   1 byte   |   1 byte   | ... |   1 byte   |   1 byte   |           2 bytes              |
        -:   14:
        -:   15:* Reads the binary contents of holding registers (4X) in the slave
        -:   16: * INPUT FRAME  = {0x11, 0x03, 0x00, 0x6, 0x00, 0x03, 0x5A, 0xE7} - 8 bytes
        -:   17: * DATAREGISTER = {0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890}
        -:   18: *
        -:   19: * The Query Message specifies the starting register and Quantity of registers to be read and the CRC for the respective query frame
        -:   20: * The register data in the response message are packed as two bytes per register
        -:   21: * The first byte contains the high order bits and the second contains the low order bits
        -:   22: * This Query Request to read 3 register values from starting address 0x06 (0x06, 0x07, 0x08)
        -:   23: * The CRC for the Response Frame is calculated and appended to the response frame ( 0xd4, 0xb2 )
        -:   24: * RESPONSE FRAME = {0x11, 0x03, 0x00, 0x06, 0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0xd4, 0xb2} - 13 bytes ( 5 bytes + (2*No.of Registers) + 2 bytes )
        -:   25:
        -:   26:
        -:   27:*/
        -:   28:#include "modbusRtu.h"
        -:   29:
        6:   30:uint16_t readHoldingRegisters(uint8_t *p_modbusTxBuf, uint16_t *p_dataMemory, mbPacketParse_t *p_parseModbusRtuData)
        -:   31:{
        -:   32:    /* local variable declaration */
        6:   33:    uint16_t length = 0;
        6:   34:    uint16_t txlength = 0;
        6:   35:    unsigned int a = 0, b = 0;
        -:   36:
        -:   37:    /* Assigning values for modbustx buffer */
        6:   38:    p_modbusTxBuf[0] = p_parseModbusRtuData->slave_addr.Val;
        6:   39:    p_modbusTxBuf[1] = p_parseModbusRtuData->functionCode;
        6:   40:    p_modbusTxBuf[2] = p_parseModbusRtuData->numberofRegister.Val * 2; /* Byte Count = no of points(registers)*2 */
        -:   41:
       50:   42:    for (a = 0; a < p_parseModbusRtuData->numberofRegister.Val; a++)
        -:   43:    {
       44:   44:        b = a * 2;
        -:   45:
       44:   46:        p_modbusTxBuf[3 + b] = p_dataMemory[p_parseModbusRtuData->startAddress.Val + a] / 0x100;
       44:   47:        p_modbusTxBuf[4 + b] = p_dataMemory[p_parseModbusRtuData->startAddress.Val + a] % 0x100;
        -:   48:    }
        6:   49:    length = 0x03 + p_modbusTxBuf[2];
        -:   50:
        6:   51:    p_parseModbusRtuData->crc.Val = generateCRC(&p_modbusTxBuf[0], length);
        -:   52:
        6:   53:    p_modbusTxBuf[length] = p_parseModbusRtuData->crc.bytes.LB;
        -:   54:
        6:   55:    p_modbusTxBuf[length + 1] = p_parseModbusRtuData->crc.bytes.HB;
        -:   56:
        6:   57:    txlength = 0x05 + p_modbusTxBuf[2];
        6:   58:    return txlength;
        -:   59:}
